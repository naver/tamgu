file f(_current+'tamgun.cxx','r');

file sauve(_current+'codeparse.cxx','w');

string lg="tf!";
mapss keywords={"foldl":"folding",
    "foldr":"folding",
    "scanl":"folding",
    "scanr":"folding",
    "foldl1":"folding1",
    "foldr1":"folding1",
    "scanl1":"folding1",
    "scanr1":"folding1",
    "takeWhile":"filtering",
    "flip":"flipping",
    "filter":"filtering",
    "dropWhile":"filtering",
    "take":"taking",
    "drop":"taking",
    "map":"mapping",
    "zipWith":"zipping",
    "zip":"pairing",
    "repeat":"cycling",
    "cycle":"cycling",
    "replicate":"repeating",
    "any" : "taskellalltrue",
    "all" : "taskellalltrue",
    "and":"taskellboolchecking",
    "or":"taskellboolchecking",
    "xor":"taskellboolchecking"
};


string cr="\n";

map indexes={"atreg":34,"astreg":39,"apreg":34,"aspreg":39,"fstring":34,"festring":39,"astringdouble":34,"afullstring":34,"astringsimple":39,"anumber":'0123456789-',"valtail":"|","maptail":"|","valmaptail":"{","valvectortail":"[",
    "jvector":"[","jmap":"{","telque":"<","intentionvect":"[","pintentionvect":"[","valmap":"{","parenthetic":"(","optional":"(","taskellvector":"[","taskellmap":"{","taskellmaptail":"|",
    "valvector":"[","valmap":"{","term":"?","tuple":"(","predicatevariable":"?","valpredicatevector":"[","valmappredicate":"{","valtuple":"(",
    "taskellcase":"c!","abool":lg,"localif":"i!", "tlquote":39, "tlist":"(","tlkeys":"{","tamgulisp":'\'
};


svector methodes=["m_expression","m_jexpression","m_pexpression","m_jdico",
    "m_taskellexpression","m_taskellkeymap","m_forin","m_finaltoken","m_taskell","m_testswitch","m_hexpression",
    "m_operator","m_hoper","m_operatoraffectation","m_comparator", "m_tlist","m_tlatom", "m_tlkeys","m_tlquote","m_tlkey"
];


map ikey;
map keyidx;
int i=0;
map kidx;

for (string sx in keywords) {
    string val=keywords[sx];
    if (ikey.test(val))
        ikey[val].push(sx);
    else {
        ikey[val]=[sx];
        kidx[val]=i;
        i++;
    }
    keyidx[sx]=kidx[val];
}

map lestabs;

string nouvelle=@"
if (currentpos>=fx->stack.size())
     return 0;
unsigned char xu = fx->stack[currentpos][intoken];
bool found = false;
switch (xu) {
"@;

string avecchaine = @"
if (currentpos>=fx->stack.size())
     return 0;
string x=fx->stack[currentpos];
if (keys.find(x)==keys.end())
return 0;
int i=keys[x];
bool found = false;
switch (i) {
"@;

string s,sx,sxx,regle;
svector v,vx,ve;
bool premier=true;
map regles,leschars;

treemapss varstrings;

for (s in f) {
    if ('#include "tamgun.h"' in s) {
        s=s.replace('#include "tamgun.h"','#include "codeparse.h"');
        sauve.write(regle);
    }

    if ("static const char* varstring" in s)
        varstrings[s["varstring":"="][:-1]]=s['"':'"'][1:-1];

    if ("bnf_tamgu::" in s) {
        if (premier)
            sauve.write(regle);
        else {
            sx=regle["::":"("][2:-1];
            if ("BODYSYMBOL" in regle or "BODYCONTEXTUAL" in regle) {
                regle["x_node* subtree=NULL;"]="//x_node* subtree=NULL;";
                regle["int addsubtree=0;"]="//int addsubtree=0;";
            }

            if ("BODYOPTIONAL" in regle or "BODYWHILE" in regle) {
                if ("setfail(" not in regle) {
                    regle["long pos=currentpos;"]="//long pos=currentpos;";
                    regle["int itok=intoken;"]="//int itok=intoken;";
                    regle["bool exitonfail=false;"]="//bool exitonfail=false;";
                }
            }

            string lenomcomplet=sx;
            if ("_" in sx[3:])
                sx=sx["m_":"_"][:-1];

            if (sx=="m_intentionvect" || sx=="m_pintentionvect")  {
                v=< <trim x> | x <- regle.trim().split(cr) >;
                int ipos="//BODYOR" in v;
                string reg;
                reg="bool fnd=false;\n";
                reg+="bool nbcomma=false;\n";
                reg+="unsigned char c;\n";
                reg+="for (long ix=currentpos+1;ix<fx->stack.size();ix++) {\n";
                reg+="c=fx->stack[ix][0];\n";
                reg+="if (c=='[' || c==']')\nreturn 0;\n";
                reg+="if (c==',') {\n";
                reg+="if (nbcomma)\nreturn 0;\nnbcomma=true;\n}\n";
                reg+='if (fx->stack[ix] == "..")'+" {\nfnd=true;\nbreak;\n}\n}\n";
                reg+="if (!fnd)\nreturn 0;\n";
                v.insert(ipos,reg);
                reg=v.join("\n");
                reg+="\n";
                sauve.writeln(reg);
                regle=s;
                continue;
            }

            if ("::m_operator_" in regle or "::m_operatoraffectation_" in regle or "::m_comparator_" in regle or "::m_hoper_" in regle) {
                sx=regle["::":"("][4:-1];
                string k=regle["if (!":")"]["'":"'"][1:-1];
                if (k!="") {
                    if (k=='!')
                        indexes[sx]=33;
                    else
                        indexes[sx]=k;
                }
            }

            if ( "::m_notreserved" in regle) {
                v=< <trim x> | x <- regle.trim().split(cr) >;
                vx=<x | x <- v," || " in x>;
                sxx=vx[0]['(':'))'][1:-1];
                vx=sxx.split(" || ");
                string reg = @"     static std::set<string> keywords;
     static bool init = true;
     if (init) {
           init = false;
"@;                
                for (sxx in vx) {
                    string k = sxx["var":")"][:-1];
                    reg += "           keywords.insert("+k+");\n";
                }
                reg += @"   }
"@;
                svector vres;
                vres.push(v[0]);
                vres.push(reg);
                reg = @"     if (keywords.find(fx->stack[currentpos]) != keywords.end()) {
            lret+=fx->stack[currentpos];
            incrementpos();"@;

                int io;
                for (io in <1,v,1>) {
                    sxx = v[io];
                    if ("||" in sxx)
                        break;
                    vres.push(sxx);
                }
                vres.push(reg);
                io++;
                vres.push(v[io]);
                vres.push("}");
                io++;
                vres &&&= v[io:];
                reg = vres.join("\n");
                reg+="\n\n";
                sauve.write(reg);
                regle=s;
                continue;
            }

            if ( "::m_wrong" in regle || "::m_notafunction" in regle || "::m_notapredicate" in regle || "::m_functionsort" in regle || "::m_filterkeyword" in regle) {
                v=< <trim x> | x <- regle.trim().split(cr) >;
                vx=<x | x <- v," || " in x>;
                sxx=vx[0]['(':'))'][1:-1];
                vx=sxx.split(" || ");
                treemap vo;
                for (sxx in vx) {
                    string k=sxx['varstring':')'][:-1];
                    k=varstrings[k];
                    if (vo.test(k[0]))
                        vo[k[0]].push(sxx);
                    else
                        vo[k[0]]=[sxx];
                }
                string reg=@"
                                	bool found=false;
                	unsigned char xs = fx->stack[currentpos][intoken];
                	switch (xs) {
                "@;
                vector vdefault;
                string e;
                for (e in vo) {
                    if (e.sizeb()>1) {
                        vdefault.push(e);
                    }
                    else {
                        reg+="case '"+e+"' :\n";
                        if (vo[e].size()==1)
                            reg+="if ("+vo[e][0]+")\nfound=true;\nbreak;\n";
                        else {
                            reg+="if ("+vo[e].join(" || ")+")\nfound=true;\nbreak;\n";
                        }
                    }
                }

                if (vdefault.size()) {
                    reg+="default:\n";
                    svector vdef;
                    for (e in vdefault)
                        vdef&&&=vo[e];
                    reg+="if ("+vdef.join(" || ")+")\nfound=true;\n";
                }


                reg+="}\n";
                reg+="if (found)";
                vx=<if (" || " in x) reg else x | x <- v>;
                reg=vx.join("\n");
                reg+="\n\n";
                sauve.write(reg);
                regle=s;
                continue;
            }

            if ("::m_hmetafunctions" in regle or "::m_hcompose" in regle) {
                v=< <trim x> | x <- regle.trim().split(cr) >;
                vx=<x | x <- v," || " in x>;
                if (vx.size()) {
                    string reg="static map<string,int> keys;\nstatic bool init=false;\nif (!init) {\n";
                    svector u=<'keys["'+x+'"]='+keyidx[x]+";" | x <- keyidx.keys()>;
                    reg+=u.join("\n");
                    reg+="\ninit=true;\n}";
                    v.insert(2,reg);
                    vx=vx[0][4:-1].split(" || ");
                    reg=avecchaine;
                    for (sx in vx) {
                        string idx=sx["_":"("][1:-1];
                        idx="case "+kidx[idx]+":\nif ("+sx+") \nfound=true;\nbreak;\n";
                        reg+=idx;
                    }
                    reg+="}\nif (found)";
                    vx=<if (" || " in x) reg else x | x <- v>;
                    reg=vx.join("\n");
                    reg+="\n\n";
                    sauve.write(reg);
                    regle=s;
                    continue;
                }
            }

            //Methodes
            if (sx in methodes) {
                v=< <trim x> | x <- regle.trim().split(cr) >;
                vx=<x | x <- v," || " in x>;
                if (vx.size()) {
                    vx=vx[0][4:-1].split(" || ");
                    primemap ors;
                    string idx;
                    for (sx in vx) {
                        sxx=sx[2:"("][:-1];
                        if (indexes.test(sxx)) {
                            idx=indexes[sxx];
                            if (idx[-1]=='!')
                                ors[indexes[sxx]]=[sx];
                            else {
                                idx=indexes[sxx][0];
                                if (sxx=="predicatevariable")
                                    ors["#"]=[sx];

                                if (ors.test(idx))
                                    ors[idx].push(sx);
                                else
                                    ors[idx]=[sx];
                                if (string(indexes[sxx])!=idx) {
                                    ors[indexes[sxx]]=[sx];
                                }
                            }
                        }
                        else {
                            if ("!" in sx) {
                                if ("x_test_char" in sx) {
                                    idx=sx["'":"'"][1:-1];
                                    if (ors.test(idx))
                                        ors[idx].push(sx);
                                    else
                                        ors[idx]=[sx];
                                }
                                break;
                            }

                            if ("x_test_in" in sx) {
                                string k=sx[r"tab%d+"];
                                for (idx in lestabs[k]) {
                                    if (ors.test(idx))
                                        ors[idx].push(sx);
                                    else
                                        ors[idx]=[sx];
                                }
                            }
                            elif ("x_test_char" in sx) {
                                idx=sx["'":"'"][1:-1];
                                if (ors.test(idx))
                                    ors[idx].push(sx);
                                else
                                    ors[idx]=[sx];
                            }
                            else {
                                if (ors.test("default"))
                                    ors["default"].push(sx);
                                else
                                    ors["default"]=[sx];                                
                            }
                        }
                    }

                    if (ors.size()==1) {
                        sauve.write(regle);
                    }
                    else {
                        string reg=nouvelle;
                        bool def=false;
                        int lettre=0;
                        for (sx in ors) {
                            if (sx[0]!="0") {
                                if (sx=="default") {
                                    def=true;
                                    continue;
                                }
                                if (sx[-1]=='!')
                                    lettre++;
                                else {
                                    if (sx.isdigit() and sx!="0")
                                        reg+="case "+sx+":\nif (";
                                    else {
                                        if (sx == '\')
                                            reg+="case '\\\\':\nif (";
                                        else
                                            reg+="case '"+sx+"':\nif (";
                                    }
                                    bool p=true;
                                    for (string e in ors[sx]) {
                                        if (not p)
                                            reg+=" || ";
                                        p=false;
                                        reg+=e;
                                    }
                                    reg+=") \nfound=true;\nbreak;\n";
                                }
                            }
                        }

                        for (sx in ors) {
                            if (sx[0]=='0') {
                                if (sx.size()==1) {
                                    reg+="case '"+sx+"':\nif (";
                                    bool p=true;
                                    for (string e in ors[sx]) {
                                        if (not p)
                                            reg+=" || ";
                                        p=false;
                                        reg+=e;
                                    }
                                }
                                else {
                                    ve=sx[1:].split("");
                                    ve=<("case '"+x+"':") | x <- ve>;
                                    reg+=ve.join("\n");
                                    reg+="\n";
                                    reg+="if ("+ors[sx][0];
                                }
                                reg+=") \nfound=true;\nbreak;\n";
                            }
                        }

                        string defaut;
                        if (def)  {
                            for (string e in ors["default"])
                                defaut+=" || "+e;
                        }

                        if (lettre) {
                            for (sx in ors) {
                                if (sx[-1]=='!') {
                                    sxx=sx[:-1];
                                    ve=<("case '"+x+"':") | x <- sxx>;
                                    reg+=ve.join("\n");
                                    if (lettre>1)
                                        reg+="\nif ("+ors[sx][0]+defaut+") \nfound=true;\nbreak;\n";
                                    else
                                        reg+="\nif ("+ors[sx][0]+") {\nfound=true;\nbreak;\n}\n";
                                }
                            }
                        }

                        if (def)  {
                            reg+="default:\nif (";
                            bool p=true;
                            for (string e in ors["default"]) {
                                if (not p)
                                    reg+=" || ";
                                p=false;
                                reg+=e;
                            }
                            reg+=") \nfound=true;\n";
                        }

                        reg+="}\nif (found)";
                        vx=<if (" || " in x) reg else x | x <- v>;
                        reg=vx.join("\n");
                        reg+="\n\n";
                        sauve.write(reg);
                    }
                }
                else
                    sauve.write(regle);
            }
            else
                sauve.write(regle);
        }
        premier=false;
        regle=s;
    }
    else {
        if ("static char tab" in s) {
            sx=s["tab":"["][:-1];
            svector sub=s["{":"}"][1:-1].split(",")[:-1];
            lestabs[sx]=< x[1:-1] | x <- sub>;
        }
        regle+=s;
    }
}

sauve.write(regle);
sauve.close();
f.close();


file relire(_current+'codeparse.cxx');
string txt=relire.read();
relire.close();

txt=txt.indent(4, false);

file sa(_current+'codeparse.cxx','w');
sa.write(txt);
sa.close();

relire.openread(_current+'tamgun.h');
txt=relire.read();
relire.close();

txt=txt.indent(4, false);

sa.openwrite(_current+'tamgun.h');
sa.write(txt);
sa.close();


