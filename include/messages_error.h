/*
 *  Tamgu (탐구)
 *
 * Copyright 2019-present NAVER Corp.
 * under BSD 3-clause
 */
/* --- CONTENTS ---
 Project    : Tamgu (탐구)
 Version    : See tamgu.cxx for the version number
 filename   : internal_error_messages_error.h
 Date       : 2023/09/19
 Purpose    : Error internal_error_messages
 Programmer : Claude ROUX (claude.roux@naverlabs.com)
 Reviewer   :
 */

#ifndef internal_error_messages_error_h
#define internal_error_messages_error_h

const char e__zip_accepts_only[] = "'_zip' accepts only lists as arguments";
const char e__zipwith_accepts_only[] = "'_zipwith' accepts only lists as arguments";
const char e_argument_should_be[] = "Argument should be an uvector";
const char e_argument_should_be_function[] = "Argument should be a function";
const char e_can_only_append[] = "'append' can only be used with a list";
const char e_can_only_loop[] = "Can only loop on a map here";
const char e_can_only_loop02[] = "Can only loop on vectors here";
const char e_cannot_apply_cons[] = "Cannot apply 'cons' to these elements";
const char e_cannot_assign_a[] = "Cannot assign a feature to a dependency node";
const char e_cannot_assign_a02[] = "Cannot assign a value in this configuration";
const char e_cannot_assign_or[] = "Cannot assign or test a feature on this dependency node";
const char e_cannot_call_self[] = "Cannot call 'self'";
const char e_cannot_compile_this[] = "Cannot compile this function declaration";
const char e_cannot_compile_this02[] = "Cannot compile this code";
const char e_cannot_compute_with[] = "Cannot compute with symbols";
const char e_cannot_divide_by[] = "Cannot divide by 0";
const char e_cannot_evaluate_this[] = "Cannot evaluate this grammar";
const char e_cannot_evaluate_this02[] = "Cannot evaluate this expression";
const char e_cannot_evaluate_this03[] = "Cannot evaluate this instruction";
const char e_cannot_execute_this[] = "Cannot execute this fibre... No function attached";
const char e_cannot_execute_this02[] = "Cannot execute this function";
const char e_cannot_extract_values[] = "Cannot extract values from this container: too small or no shape";
const char e_cannot_invert_numerator[] = "Cannot invert, numerator is 0";
const char e_cannot_launch__eval[] = "Cannot launch '_eval' in threads";
const char e_cannot_load[] = "Cannot load: ";
const char e_cannot_load02[] = " Cannot load: ";
const char e_cannot_load03[] = "Cannot load:";
const char e_cannot_load_library[] = "Cannot load library: ";
const char e_cannot_loop_on[] = "Cannot loop on this element";
const char e_cannot_loop_on02[] = "Cannot loop on this value";
const char e_cannot_mix_constant[] = "Cannot mix constant keys with variables";
const char e_cannot_open_file[] = "Cannot open file: ";
const char e_cannot_open_this[] = "Cannot open this file";
const char e_cannot_parse_this[] = "Cannot parse this string";
const char e_cannot_process_indexes[] = "Error: Missing interval or index method in this frame";
const char e_cannot_reset_a[] = "Cannot reset a 'rawstring' with threads on";
const char e_cannot_set_a[] = "Cannot set a java_vector with an interval";
const char e_cannot_set_this[] = "This value is incompatible with this type";
const char e_cannot_store_this[] = "Cannot store this value at this position: wrong size";
const char e_cannot_these_two[] = "You cannot apply the operator '::' to these two elements";
const char e_data_structure_mismatch[] = "Data structure mismatch (or frame): '";
const char e_denominator_cannot_be[] = "Denominator cannot be 0";
const char e_derivation_is_limited[] = "Derivation is limited to one frame. You cannot derive from '";
const char e_empty_string_cannot[] = "Empty string cannot be used as a regular expression: '";
const char e_error_a_function[] = "Error: A function with this name already exists: '";
const char e_error_an_autorun[] = "Error: An AUTORUN cannot have parameters: '";
const char e_error_an_autorun02[] = "Error: An AUTORUN must be declared as a global function: '";
const char e_error_attempt_to[] = "Error: Attempt to use private frame:";
const char e_error_cannot_extend[] = "Error: cannot extend this type:";
const char e_error_cannot_find[] = "Error: Cannot find a matching function to a pre-declared function (check the declaration order): '";
const char e_error_divided_by[] = "Error: Divided by 0";
const char e_error_mismatch_argument[] = "Error: mismatch argument in a call to a taskell function for: ";
const char e_error_missing_code[] = "Error: missing code or unknown argument: ";
const char e_error_predefined_procedure[] = "Error: Predefined procedure, consider choosing another name: '";
const char e_error_ring_full[] = "Error: Ring full";
const char e_error_this_frame[] = "Error: This frame cannot be created:";
const char e_error_this_function[] = "Error: This function has already been used in a call: '";
const char e_error_while_closing[] = "Error while closing 'popen' stream";
const char e_error_while_opening[] = "Error while opening 'popen' stream";
const char e_error_while_parsing[] = "Error while parsing Lisp '";
const char e_error_while_parsing02[] = "Error while parsing program file: ";
const char e_error_while_parsing03[] = "Error while parsing string: ";
const char e_error_while_parsing04[] = "Error while parsing a TAG expression at line: ";
const char e_error_while_parsing05[] = "Error while parsing a parenthetic expression at line: ";
const char e_error_wrong_assert[] = "Error: Wrong assert or retract definition";
const char e_error_wrong_parameter[] = "Error: Wrong parameter definition";
const char e_error_you_can[] = "Error: You can only modify one dependency at a time.";
const char e_error_you_cannot[] = "Error: You cannot declare a function within a function: '";
const char e_expected_a_vector[] = "Expected a vector as input";
const char e_expecting_a_comparison[] = "Expecting a comparison function with one or two parameters";
const char e_expecting_a_comparison02[] = "Expecting a comparison function with two parameters";
const char e_expecting_a_comparison03[] = "Expecting a comparison function with one parameter";
const char e_expecting_a_frame[] = "Expecting a frame: '";
const char e_expecting_a_function[] = "Expecting a function of arity: 2";
const char e_expecting_a_function02[] = "Expecting a function";
const char e_expecting_a_key[] = "Expecting a key of 1 ASCII character";
const char e_expecting_a_list[] = "Expecting a list as argument for folding";
const char e_expecting_a_map[] = "Expecting a 'map' as argument";
const char e_expecting_a_map02[] = "Expecting a map as value";
const char e_expecting_a_mapui[] = "Expecting a mapui as argument";
const char e_expecting_a_predicate[] = "Expecting a predicate as argument";
const char e_expecting_a_synode[] = "Expecting a 'synode' or a 'map'";
const char e_expecting_a_synode02[] = "Expecting a 'synode' here";
const char e_expecting_a_variable[] = "Expecting a variable in FOR";
const char e_expecting_a_vector[] = "Expecting a vector container";
const char e_expecting_a_vector02[] = "Expecting a vector as second parameter";
const char e_expecting_a_vector03[] = "Expecting a vector as input";
const char e_expecting_object[] = "Expecting object";
const char e_expecting_variables_in[] = "Expecting variables in FOR to loop in";
const char e_format_expression_malformed[] = "Format expression malformed: missing closing '}': '";
const char e_frame_function_unreachable[] = "Frame function unreachable: '";
const char e_incoherent_feature_testing[] = "Incoherent feature testing";
const char e_incompatible_type_in[] = "Incompatible type in loop";
const char e_incorrect_format_specifier[] = "Incorrect format specifier or size too long";
const char e_index_out_of[] = "Index out of bound";
const char e_indexes_do_not[] = "Indexes do not match the shape";
const char e_input_map_is[] = "Input map is smaller than pattern";
const char e_invalid_operation[] = "Invalid operation: '";
const char e_lambda_expression_failed[] = "Lambda expression failed...";
const char e_lists_should_all[] = "Lists should all have the same size in '_zipwith'";
const char e_lists_should_all02[] = "Lists should all have the same size in '_zip'";
const char e_maximum_size_of[] = "Maximum size of table reached";
const char e_meaningless_comparison_with[] = "Meaningless comparison with symbols";
const char e_mismatch_assignment[] = "Mismatch assignment.";
const char e_mismatch_assignment02[] = "Mismatch assignment";
const char e_mismatch_assignment_expecting[] = "Mismatch assignment, expecting two vector containers.";
const char e_mismatch_assignment_expecting02[] = "Mismatch assignment, expecting two map containers.";
const char e_mismatch_between_return[] = "Mismatch between return value and function declaration. Expecting: '";
const char e_mismatch_between_return02[] = "Mismatch between return value and thread declaration. Expecting: '";
const char e_missing__initial_function[] = "Missing '_initial' function for this object: '";
const char e_missing__initial_function02[] = "Missing '_initial' function, check the arguments";
const char e_missing_argument_in[] = "Missing argument in: '";
const char e_missing_file_name[] = "Missing file name..";
const char e_missing_file_space[] = "Missing file space id";
const char e_missing_filename[] = "Missing filename";
const char e_missing_object[] = "Missing object";
const char e_missing_parameter[] = "Missing parameter: '";
const char e_missing_parameters[] = "Missing parameters";
const char e_no__initial_function[] = "No '_initial' function' for ";
const char e_no_entry_point[] = "No entry point in this library: ";
const char e_no_extension_exists[] = "No 'extension' exists for a '";
const char e_no_fully_cleaned[] = "No fully cleaned:";
const char e_no_function_assigned[] = "No function assigned";
const char e_no_value_at[] = "No value at this position in the container";
const char e_non_instanciated_variable[] = "Non instanciated variable in a dependency rule: '";
const char e_not_found[] = "Not found";
const char e_not_implemented[] = "Not implemented";
const char e_only_a_return[] = "Only a return type can declared in a lambda expression";
const char e_only_numerical_variable[] = "Only numerical variable can be used here";
const char e_out_of_range[] = "Out of range affectation.";
const char e_please_set_tamgulibs[] = "Please set TAMGULIBS: ";
const char e_posix_regular_expressions[] = "Posix regular expressions not available";
const char e_property_requires_two[] = "Property requires two parameters:";
const char e_range_over_actual[] = "RANGE over actual capacity";
const char e_regular_expressions_for[] = "Regular expressions for ";
const char e_role_requires_at[] = "Role requires at least one parameter:";
const char e_size_mismatch[] = "Size mismatch.";
const char e_stack_overflow[] = "Stack overflow";
const char e_string_overflow[] = "String overflow";
const char e_string_should_be[] = "String should be one character long in RANGE";
const char e_table_is_full[] = "Table is full";
const char e_the_comparison_function[] = "The comparison function does not satisfy the strict weak ordering rule";
const char e_the_declaration_does[] = "The declaration does not match the argument list of the function";
const char e_the_number_of[] = "The number of parameters does not match the data structure definition";
const char e_there_should_be[] = "There should be 15 values, 3 digits for each denomination: string, method, keyword, function, comment";
const char e_this_function_is[] = "This function is expected to return a value";
const char e_this_object_is[] = "This object is not a function";
const char e_this_operator_can[] = "This operator can only be used within Taskell expressions";
const char e_this_synode_is[] = "This 'synode' is already part of a tree";
const char e_this_variable_has[] = "This variable has already been declared: ";
const char e_this_variable_has02[] = "This variable has already been declared as a frame variable: ";
const char e_this_variable_is[] = "This variable is not a frame type: '";
const char e_this_variable_is02[] = "This variable is not a frame field: '";
const char e_too_many_threads[] = "Too many threads";
const char e_type_mismatch_expected[] = "Type mismatch... Expected: '";
const char e_type_mismatch_for[] = "Type mismatch for '";
const char e_uninitialized_self_variable[] = "Uninitialized 'self' variable";
const char e_unknown_attribute[] = "Unknown attribute: '";
const char e_unknown_attributevalue[] = "Unknown attribute/value: '";
const char e_unknown_command[] = "Unknown command:";
const char e_unknown_data_structure[] = "Unknown data structure (or frame): '";
const char e_unknown_data_structure02[] = "Unknown data structure: '";
const char e_unknown_expression[] = "Unknown expression";
const char e_unknown_expression02[] = "Unknown expression: ";
const char e_unknown_feature[] = "Unknown feature: '";
const char e_unknown_file[] = "Unknown file: ";
const char e_unknown_filename[] = "Unknown filename: ";
const char e_unknown_frame[] = "Unknown frame: '";
const char e_unknown_frame_variable[] = "Unknown frame variable: '";
const char e_unknown_function[] = "Unknown function: '";
const char e_unknown_function_or[] = "Unknown function or procedure: '";
const char e_unknown_key[] = "Unknown key";
const char e_unknown_line[] = "Unknown line";
const char e_unknown_lock[] = "Unknown lock";
const char e_unknown_method[] = "Unknown method: '";
const char e_unknown_operation_for[] = "Unknown operation for this file";
const char e_unknown_posix_regular[] = "Unknown posix regular expression: '";
const char e_unknown_predicate_variable[] = "Unknown predicate variable";
const char e_unknown_tamgu_regular[] = "Unknown tamgu regular expression: '";
const char e_unknown_type[] = "Unknown type: '";
const char e_unknown_variable[] = "Unknown variable: '";
const char e_unknown_variable02[] = "Unknown variable";
const char e_variable_name_cannot[] = "Variable name cannot be a type: '";
const char e_variable_name_cannot02[] = "Variable name cannot be a type: ";
const char e_we_can_only[] = "We can only associate a function through 'with': ";
const char e_we_can_only02[] = "We can only associate a function through 'with' in a 'switch' statement";
const char e_wrong_access_to[] = "Wrong access to the file";
const char e_wrong_affectation[] = "Wrong affectation";
const char e_wrong_argument_expecting[] = "Wrong argument. Expecting a 'transducer' object.";
const char e_wrong_taskell_assignment[] = "Wrong assignment: Expected a taskell function";
const char e_wrong_assignment_expected[] = "Wrong assignment: Expected an 'annotator' variable";
const char e_wrong_cond_element[] = "Wrong cond element";
const char e_wrong_definition_of[] = "Wrong definition of a lisp 'defun' function";
const char e_wrong_expression[] = "Wrong expression: '";
const char e_wrong_feature_structure[] = "Wrong feature structure";
const char e_wrong_frame_assignment[] = "Error: Assignment of an incompatible value to a frame object";
const char e_wrong_frame_initialization[] = "Wrong frame initialization";
const char e_wrong_function_call[] = "Wrong function call: expecting a 'taskell function'";
const char e_wrong_function_name[] = "Wrong function name";
const char e_wrong_grammar_definition[] = "Wrong grammar definition";
const char e_wrong_index[] = "Wrong index";
const char e_wrong_index_access[] = "Wrong index access";
const char e_wrong_index_value[] = "Wrong Index Value";
const char e_wrong_indexes_in[] = "Wrong indexes in a 'fmatrix'";
const char e_wrong_indexes_in02[] = "Wrong indexes in a 'imatrix'";
const char e_wrong_json_definition[] = "Wrong JSON definition. Internal line error: ";
const char e_wrong_json_definition02[] = "Wrong JSON definition. Expecting a map or a vector definition";
const char e_wrong_key_in[] = "Wrong key in a container or a string access";
const char e_wrong_list_of[] = "Wrong list of operations for folding";
const char e_wrong_list_of02[] = "Wrong list of operations for '_zipWith'";
const char e_wrong_list_of03[] = "Wrong list of operations for '_takewhile'";
const char e_wrong_list_of04[] = "Wrong list of operations for '_filter'";
const char e_wrong_list_of05[] = "Wrong list of operations for '_dropwhile'";
const char e_wrong_list_of06[] = "Wrong list of arguments for 'apply'";
const char e_wrong_list_of07[] = "Wrong list of arguments for '_filter'";
const char e_wrong_list_of08[] = "Wrong list of arguments for '_dropwhile'";
const char e_wrong_list_of09[] = "Wrong list of operations for '_zipwith'";
const char e_wrong_list_of10[] = "Wrong list of arguments for '_takewhile'";
const char e_wrong_list_of11[] = "Wrong list of arguments for '_map'";
const char e_wrong_list_of12[] = "Wrong list of operations for '_map'";
const char e_wrong_map_definition[] = "Wrong map definition. Internal line error: ";
const char e_wrong_map_definition02[] = "Wrong map definition. Expecting a vector definition";
const char e_wrong_map_definition03[] = "Wrong map definition. Expecting a map definition";
const char e_wrong_map_initialization[] = "Wrong map initialization";
const char e_wrong_name[] = "Wrong name";
const char e_wrong_number_of[] = "Wrong number of arguments in 'keys'";
const char e_wrong_number_of02[] = "Wrong number of arguments or incompatible argument in '_initial' function for this object: '";
const char e_wrong_number_of03[] = "Wrong number of arguments in 'call method'";
const char e_wrong_number_of04[] = "Wrong number of element in an instruction";
const char e_wrong_number_of05[] = "Wrong number of arguments in 'key'";
const char e_wrong_number_of06[] = "Wrong number of arguments or incompatible argument: '";
const char e_wrong_parameter_definition[] = "Wrong parameter definition";
const char e_wrong_shape_definition[] = "Wrong shape definition";
const char e_wrong_tamgu_regular[] = "Wrong tamgu regular expression";
const char e_wrong_value_for[] = "Wrong value for an hour";
const char e_wrong_value_for02[] = "Wrong value for a year";
const char e_wrong_value_for03[] = "Wrong value for a second";
const char e_wrong_value_for04[] = "Wrong value for a minute";
const char e_wrong_value_for05[] = "Wrong value for a day";
const char e_wrong_vector_definition[] = "Wrong vector definition. Internal line error: ";
const char e_wrong_version[] = "Wrong version: ";
const char e_you_cannot_modify[] = "You cannot modify this constant variable";
const char e_you_cannot_use[] = "You cannot use 'this' out of a frame or an extension";
const char e_error_on_frame_vector[] = "Pushing an incompatible value into a frame vector";
const char e_error_on_frame_map[] = "Pushing an incompatible value into a frame map";
const char e_error_frame_container[] = "Error: incompatible variable type: '";
const char e_error_loop_frame_container[] = "' to loop in a frame container: '";
#endif
